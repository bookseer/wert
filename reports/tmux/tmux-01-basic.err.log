Traceback (most recent call last):
  File "/home/askras/pyvenv/bookseer-dev-pcQinsDa-py3.12/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/askras/pyvenv/bookseer-dev-pcQinsDa-py3.12/lib/python3.12/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/askras/pyvenv/bookseer-dev-pcQinsDa-py3.12/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 172, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib64/python3.12/asyncio/base_events.py", line 684, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/askras/pyvenv/bookseer-dev-pcQinsDa-py3.12/lib/python3.12/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/home/askras/pyvenv/bookseer-dev-pcQinsDa-py3.12/lib/python3.12/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/askras/pyvenv/bookseer-dev-pcQinsDa-py3.12/lib/python3.12/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
tmux может стать невероятным источником повышения производительности, как только вы его освоите. 
В этой главе вы познакомитесь с основными приемами tmux для управлении приложениями в сеансах, окнах и панелях.
Эти простые концепции составляют основу того, что делает tmux прекрасной средой как для  разработчиков, так и для системных администраторов.

Но прежде чем вы сможете научиться использовать эти основные функции, вам необходимо установить tmux.


## Установка tmux

Вы можете установить tmux одним из двух способов: с помощью менеджера пакетов для вашей операционной системы или путем сборки из исходников.

Какой бы метод вы ни выбрали, убедитесь, что вы установили tmux версии 2.2 или выше. 
Ранние версии tmux не поддерживают некоторые функции, которые мы будем рассмотривать в этой книге, или имеют несовместимую конфигурация.


### Установка на Mac

Самый простой способ установить tmux на Mac — с помощью Homebrew.[2]

Сначала установите Xcode через Mac App Store. После установки Xcode откройте новый терминал и введите команду

`xcode-select --install`

для установки инструментов командной строки, которые нужны Homebrew.

Затем установите Homebrew, следуя инструкциям на веб-сайте Homebrew.

Наконец, с помощью следующей команды терминала установите tmux:

`$ brew install tmux`

Чтобы убедиться, что tmux установлен   проверить, и что у вас правильная версия, выполните в теминале следующию команду:

`$ tmux -V` 

tmux 2.3


### Установка в Windows 10

В августе 2016 года Microsoft выпустила обновление для Windows 10, которое добавляет оболочку Bash в Windows.
Эта оболочка работает на Ubuntu и поддерживает tmux. 
Чтобы использовать ее, сначала переведите свой компьютер в режим разработчика.
Откройте приложение «Настройки», выберите «Обновление и безопасность», а затем «Для разработчиков». 
Включите «Режим разработчика».

Затем откройте панель управления и выберите «Программы». 
Далее нажмите «Включить или отключить компоненты Windows». 
Найдите и включите параметр «Подсистема Windows для Linux». 
После всег этого перезагрузите компьютер.
Когда компьютер перезагрузится, откройте командную строку и введите

`С:\>bash`

Вам будет предложено установить Bash из Windows Store. 
Это бесплатная загрузка, которая занимает несколько минут на загрузку и распаковку, но вскоре вы будете готовы установить tmux.

После установки Bash перейдите к следующему разделу, так как вы установите tmux из исходного кода, как если бы вы использовали
Ubuntu.


### Установка в Linux

Лучший способ установить в Linux tmux -- загрузить исходный код и скомпилировать его самостоятельно.
Менеджеры пакетов не всегда имеют самую последнюю версию tmux. 
Процесс установки tmux одинаков на всех платформах. 
Вам понадобится компилятор GCC, а также libevent и ncurses, от которых зависит tmux.

В Ubuntu вы можете установить все это с помощью диспетчера пакетов apt:

`$ sudo apt-get install build-essential libevent-dev libncurses-dev`


После установки компиляторов и необходимых компонентов возьмите исходный код tmux и загрузите его.[3]

Разархивируйте загруженную версию и установите ее следующим образом:

`$ tar -zxvf tmux-2.3.tar.gz`

`$ cd tmux-2.3`

`$ ./configure`

`$ make`

`$ sudo make install`

Вы можете протестировать установку, выполнив команду которая возвращает текущую установленную версию tmux:

`$ tmux -V`

tmux 2.3

Теперь, когда у вас правильно установлен tmux, давайте рассмотрим основные его функции, начав с базового сеанса.


## Запуск tmux

Запустить tmux очень просто, нужно ввести в терминале:

`$ tmux`

Вы увидите что-то похожее на следующее изображение, появившееся на вашем экране.

![](./img/-020-002.png)

Это «сеанс» (session) tmux, и он работает так же, как и ваш обычный терминальный сеанс. 
Вы можете ввести любую команду, которую захотите, и все будет работать, как ожидалось.

Чтобы закрыть сеанс tmux, просто введите

`$ exit`

в самом сеансе. 

Это приведет к закрытию tmux, а затем вернет вас к стандартному терминалу.

Но, если только вы не используете tmux в течение очень короткого периода времени, это не лучший способ работать с сеансами в tmux. 
Вместо этого вы можете создать «именованные сеансы», которые затем сможете идентифицировать и работать с ними позже.


### Создание именованных сеансов

Вы можете запускать несколько сеансов на одном компьютере, и при желании организовывать их по своему усмотрению.
Например, у вас может быть один сеанс для приложения, которое вы разрабатываете, и сеанс для вашего крутого сайд-проекта. 
Вы можете организовать эти сеансы, давая каждому собственное уникальное имя. 
Попробуйте прямо сейчас. 
Следующая команда позволит вам создать именованный сеанс под названием «basic»:

`$ tmux new-session -s  basic`

Сокращенный вариант этой команды выглядит так:
    
`$ tmux new -s basic`

Как только вы введете эту команду, то попадете в совершенно новый сеанс tmux, но на самом деле вы не заметите чего-нибудь особенного или отличного от того, что вы обычно видите в терминале. 
Если вы наберете `exit` , вы снова вернетесь в свой обычный терминал. 
Именованные сеансы удобны, когда вы хотите оставить tmux запущенным в фоне. Этот вопрос мы вскоре обсудим. 

Но прежде чем продолжить, введите

`$ exit`

чтобы выйти из tmux.

Прежде чем мы рассмотрим, как работать с сеансами tmux и запускать программы в фоновом режиме, давайте поговорим о как отправлять команды в tmux.


## Префикс команды

Поскольку консольные приложения выполняются внутри tmux, нам нужен способ сообщить tmux, что команда, которую мы вводим предназначен для него, а не для основного приложения.
Это делается с помощью комбинации 'CTRL-b'.
Данная комбинация называется префиксом команды.
Перед вводом любой команды tmux необходимо использовать эту комбинацию клавиш. 
Чтобы понять, как это работает, снова откройте tmux:

`$ tmux`

После этого, внутри tmux нажмите `CTRL-b`, затем нажмите `t`. 
На экране появятся большие часы.

![](./img/-022-003.png)

Важно отметить, что вы не должны удерживаеть все клавиши вместе. Вместо этого сначала одновременно нажмите 'CTRL-b' и отпустите эти клавиши, а затем сразу же нажмите клавишу для команды, которую вы хотите отправить tmux.

В оставшейся части этой книги я буду использовать обозначение `PREFIX`, за которым следует горячая клавиша для команды tmux, например, `PREFIX d` для отключения от сеанса. 
В Главе 2, «Настройка tmux», вы узнаете как переназначить префикс на более простую комбинацию, но пока вы будете использовать по умолчанию `CTRL-b` всякий раз, когда увидите PREFIX .
Нажмите клавишу `ENTER`, чтобы закрыть часы, и выйдите из tmux, набрав `exit`. Теперь давайте посмотрим, как запустить программы в фоновом режиме. 


## Отсоединение и присоединение к сеансу

Одним из самых больших преимуществ tmux является то, что вы можете запутить его, запустить программы или процессы внутри tmux, а затем оставить все это работающим в фоновом режиме, «отсоединившись» (detaching) от сеанса.

Если вы закроете обычный сеанс терминала, все программы, запущенные в этом сеансе, будут уничтожены.
Но когда вы отсоединяетесь от сеанса tmux, вы на самом деле не закрываете его. 
Любые программы, которых вы запускали в этом сеансе будут продолжать работать. 
Позже вы можете «присоединиться» (attach) к сеансу и продолжить с того места, на котором остановились. 
Для демонстрации этого, давайте создадим новый именованный сеанс tmux, запустим программу и отсоединимся от сеанса.

Сначала создайте сеанс:

`$ tmux new -s basic`

Затем в сеансе tmux запустите приложение с именем `top`, которое отслеживает использование памяти и процессора:

`$ top`


В вашем терминале вы увидете что-то похожее на следующий рисунок.

![](./img/-023-004.png )

Теперь отключитесь от сеанса tmux, нажав `PREFIX` `d`. 
Это вернет вас обычный терминал.
Теперь давайте посмотрим, как вернуться к тому сеансу tmux, который мы оставили запущенным. Но прежде чем мы это сделаем, закрой окно терминала.


### Повторное подключение к существующим сеансам

Мы создали сеанс tmux, запустили программу внутри сеанса, отсоединились от него и закрыли окно терминала, но сеанс tmux все еще работает вместе с приложением, которое мы запустили.

Вы можете просмотреть существующие сеансы tmux, используя команду

`$ tmux list-session`

в новом окне терминала. Также можно использовать сокращенный вариант команды:

`$ tmux ls`

Команда показывает, что в данный момент запущен один сеанс:

*basic: 1 windows (created T ue Aug 23 16:58:26 2016) [105x25]*

Чтобы подключиться к сеансу, используйте ключевое слово `attach`. 
Если у вас запущен только один сеанс, то можете просто ввести

`$ tmux attach`

и снова будете присоеденены к сеансу. 

Все становится сложнее, если у вас запущено более одного сеанса. Отключитесь от основного сеанса с помощью `PREFIX` `d`.

Теперь создайте новый сеанс tmux в фоновом режиме с помощью команды

`$ tmux new -s second_session -d`

Это создается новый сеанс, без автоматического присоединения к нему.

Теперь просмотрев список сеансов, вы увидите два запущенных сеанса:

`$ tmux ls`

*basic: 1 windows (created T ue Aug 23 16:58:26 2016) [105x25]*
*second_session: 1 windows (created T ue Aug 23 17:49:21 2016) [105x25]*

Вы можете подключиться к нужному сеансу, используя флаг `-t`, за которым следует имя сеанса. 
Запустите следующую команду:

`$ tmux attach -t second_session`

Это присоединит вас к сеансу tmux second_session. 
Вы можете отсоединиться от этого сеанса так же, как вы это сделали ранее, используя `PREFIX` `d`, а затем присоединитесь к другому сеансу. 

В разделе  «Переключение между сеансами» главы 6 вы узнаете другие способы перемещения между активными сеансами. 
А пока давайте удалим активные сеансы.


### Закрытие сеанса

Вы можете ввести `exit` внутри сеанса, чтобы закрыть сеанс.  Другой способ закрытия сеанса -- команда `kill-session`.

Она работает так же, как `tmux attach`:

`$ tmux kill-session -t basic`

`$ tmux kill-session -t second_session`

Это может быть полезно в ситуациях, когда программа в сеансе зависла.

Если вы снова попытаетесь получить список сеансов, то получите следующее сообщение:

`$ tmux ls`

*no server running on /tmp/tmux-1002/default*

Поскольку сеансы tmux не запущены, то и сам tmux не работает, поэтому он не может обработать запрос.

Теперь, когда вы познакомились с основами создания сеансов и работы с ними, давайте посмотрим, как можно организовать работу с несколькими программами в рамках одного сеанса.


## Работа с окнами

Это возможно, и очень часто  в сеансе tmux выполняется несколько одновременных приложений. 
Поддерживать порядок и организацию можно с помощью окон, которые похожи на вкладки в современных эмуляторах графического терминала или веб-браузерах.
Когда мы запускаем новый сеанс, tmux создает для нас начальное окно. 
Мы можем создать столько сеансов, сколько необходимо, и они будут сохраняться, когда мы отсоединяемся и присоединяемся к ним  снова.

Давайте создадим новый сеанс с двумя окнами. 
В первом окне будет наш обычный терминал, а во второ запустим команду `top`. 

Создайте именованный сеанс под названием «windows»:
`$ tmux new -s windows -n shell`

Используя флаг `-n`, мы сообщаем tmux имя первого окна, чтобы  можно было легко его идентифицировать.
Теперь давайте добавим еще одно окно в этот сеанс.


### Создание и наименование окон

Чтобы создать окно в текущем сеансе, нажмите `PREFIX` `c`.
Такой способ создание приводит к автоматическому переключению фокуса на новое окно. 
В нем вы можете запустить другое приложение. 
Давайте запустим `top` в этом новом окне.

`$ top`

Первое окно имеет определенное вами имя «shell», а второе окно теперь имеет имя имя «top». 
Имя этого окна будет меняеться в зависимости от запущенного в данный момент приложения, потому что вы не дали ему имя по умолчанию при создании. 
Итак, давайте дадим этому окну правильное имя.

Чтобы переименовать окно, нажмите `PREFIX` `,` (запятая). После этого строка состояния изменится, позволяя вам переименовать текущее окно. 
Переименуйте окно в «Processes».

Вы можете создать столько окон в сеансе tmux, сколько захотите. Но как только их становится больше одного, нужно иметь возможность перемещаться между ними.


### Перемещение между окнами
На данный момент вы создали два окна, и есть несколько способов перемещаться между ними. 
Когда у вас только два окна, вы можете быстро перемещаться между ними с помощью `PREFIX` `n`, переключаясь на следующеее окно (**n**ext window). 
Так можно циклически перебрать окна, которые вы открыли. 
Так как сейчас у вас есть только два окна такаой способ позволит просто переключается между ними.
Также можно использовать `PREFIX` `p` для перехода к предыдущему окну (**p**revious window).

По умолчанию каждое окно в tmux имеет номер, начинающийся с 0. Можно быстро перейти к первому окну используя `PREFIX` `0`, ко второму --  `PREFIX` `1` . 
Такая нумерация окон, начинающаяся с нуля, не всегда интуитивно понятна, но в Главе 2 «Настройка tmux», вы узнаете, как сделать так, чтобы нумерация окон начиналась с единицы, а не с нуля.

Если у вас больше девяти окон, вы можете использовать `PREFIX` `w` для отображения визуального меню cо списком ваших окон, чтобы выбрать то, которое необходимо в данный момент. 

Еще можно использовать `PREFIX` `f` , чтобы найти окно, содержащее строку текста.
Если ввести текст и нажать клавишу `Enter`, отобразится список окон, содержащих этот текст.

Теперь вы можете продолжить создавать новые окна и запускать программы. 
Когда вы отсоединитесь от своего сеанс и повторно подключить позже, все ваши окна будут там, где вы их оставили.

Чтобы закрыть окно, вы можете либо ввести `exit` в приглашение в окне, либо использовать `PREFIX` `&`, после чего отобразится подтверждающее сообщение в строке состояния перед закрытием окна. 
Если вы подтвердите закрытие, активным станет предудущее окно. 
Чтобы полностью закрыть сеанс tmux, вы должны закрыть все окна в сеансе.

Создание окон — это здорово, но мы можем сделать tmux еще более полезным, разбив окно на панели.


## Работа с панелями

Наличие программ в отдельных окнах подходит для случаев, которые мы не против скрыть некоторые из них. 
Но с tmux, мы можем разделить один сеанс на панели.

Создайте новый сеанс tmux под названием «panes», чтобы можно было поэкспериментировать с тем, как работают панели. 
Закройте все существующие сеансы tmux и создайте новый следующим образом:

`$ tmux new -s panes`

Мы можем делить окна по вертикали или по горизонтали. 

Давайте сначала разделим окно пополам по вертикали, а затем по горизонтали, создав одну большую панель слева и две меньшие справа, как показано на рисунке.

![](./img/-028-005.png)

В сеансе tmux нажмите `PREFIX` `%`, и окно разделится посередине, запустив второй сеанс терминала в новой панели. 
Кроме того, фокус переместится на эту новую панель. Нажатие `PREFIX` `"` (двойная кавычка) разделит эту новую панель пополам по горизонтали. 
По умолчанию новые панели разделяют существующую панель ровно пополам.

Для циклического переключения между панелями нажимайте `PREFIX` `o`.
Также для переключения между панелями можете использовать `PREFIX` и клавиши со стрелками.

Всего парой нажатий клавиш мы разделили одно окно на рабочую область с тремя панелями. 
Давайте посмотрим на как мы можем переупорядочить эти панели с помощью макетов.


### Макеты панелей

Мы можем изменить размер панели либо с помощью постепенного изменения размера, либо с помощью шаблонов.
Сочетание клавиш для постепенного изменения размера панелей по умолчанию довально таки не удобное. 
В Главе «Настройка tmux» мы переопределим сочетания клавиш, чтобы упростить изменение размеров панелей. 
На данный момент мы будем использовать один из нескольких стандартных макетов панелей:

- *even-horizontal* размещает все панели горизонтально, слева направо. 

- *even-vertical*  размещает все панели вертикально сверху вниз.

- *main-horizontal* создает одну большую панель вверху и меньшие панели внизу.

- *main-vertical* создает одну большую панель в левой части экрана и остальные панели вертикально справа.

- *tiled* упорядочивает все панели равномерно на экране.

Переключаться между этими раскладками можно нажимая `PREFIX` `ПРОБЕЛ`.


### Закрытие панелей

Закрытие панели происходит так же, как вы и закрытие сеанса или окна tmux: нужно просто ввести `exit` в
панель, которую необходимо закрыть.

Еще можно закрыть панель с помощью сочетания `PREFIX` `x`, которое также закроет окно, если в нем только одна панель. 

Вам будет предложено подтвердить, хотите ли вы закрыть указанную панель. 
Такое удаление панели отлично подходит для ситуации, когда приложение в панели зависло или вы больше не можете с ним взаимодействовать.

Теперь мы можем создавать новые сеансы, создавать окна, панели и перемещаться между ними.
Прежде чем мы перейдем к более сложным темам, давайте рассмотрим некоторые дополнительные команды tmux.


## Работа в командном режиме

До сих пор мы использовали комбинации клавиш для создания окон и панелей, но эти комбинации клавиш на самом деле просто
ярлыки для команд tmux с некоторыми предустановленными параметрами. 
Мы можем выполнять команды tmux двумя способами: из самого терминала или из области команд в строке состояния tmux. 
Вы узнаете об использовании tmux команды из терминала в Главе 3 «Создание настраиваемых рабочих окружений в tmux», а пока давайте изучим командный режим tmux, используя его для создания новых окон и панелей в нашей рабочей области.

Чтобы войти в командный режим, нажмите `PREFIX` `:` (двоеточие) в активном сеансе tmux. 
Строка состояния изменит цвет, и вы получите подсказку, указывающую, что можно ввести команду. 
Можно, например, создать новое окно с помощью команды ` new-window`:

`new-window -n console`

Используя команду, а не сочетание клавиш, вы можете создать новое окно и сразу дать ему имя, используя флаг `-n`. 
Давайте сделаем еще один шаг и сразу запустим программу `top` в новом окне при его создании.
Для этого нужно войти в командный режим и ввести команду:

`new-window -n processes "top"`

Когда вы нажжмете `ENTER`, появится новое окно и запустится приложение `top`, показывающее запущенные процессы.

Указание команды для окна при его создании чрезвычайно удобно для краткосрочных задач, но есть небольшой нюанс; если вы выйдете из приложения `top`, нажав `q` , созданное вами окно tmux также закроется. 
Можно использовать параметры конфигурации, чтобы обойти это, но если вы хотите, чтобы окно сохранялось, просто создайте его без указания начальной команды, а затем уже выполните эту в новом окне.

Вы можете использовать командный режим для создания новых окон, новых панелей или новых сеансов или даже для установки других параметров среды. 
В Главе 2 «Настройка tmux», мы создадим несколько собственных сочетаний клавиш, чтобы сделать использование некоторых из этих команд еще проще.

## Что дальше?

В этой главе вы изучили основы использования сеансов tmux, панелей, окон и команд, но осталость еще много чего другого.

Используя `PREFIX` `?`, вы можете получить список всех предопределенных сочетаний клавиш tmux и связанных с ними команд.

Когда вы работаете с tmux, подумайте, как вы можете создавать различные среды для своей работы.
Если вы мониторите серверы, вы можете использовать панели tmux для создания информационной панели, которая показывает различные мониторинговые скрипты и лог-файлы.

Сейчас, уже имея некоторый опыт работы с tmux, давайте создадим собственную конфигурацию, которую сможем использовать для наших остальных  рабочих задач.


## Для дальнейшего использования


### Создание сеансов


 Команда          | Описание 
:-----------------|:----------
`tmux new-session` | Создает новый сеанс без имени. Можно сократить до `tmux new -s` или просто `tmux`.
`tmux new -s development` | Создает новый сеанс под названием «development».
`tmux new -s development -n editor` | Создает сеанс с именем «development» и называет первое окно «editor».
`tmux attach -t development` | Подключается к сеансу под названием «development».


### Команды по умолчанию для сеансов, окон и панелей

 Команда            | Описание 
:-------------------|:----------
`PREFIX` `d`        | Отключение от сеанса, оставляя сеанс запущенным в фоновом режиме.
`PREFIX` `:`        | Переход в командный режим.
`PREFIX` `c`        | Создание нового окна в текущем сеансе tmux. Сокраещение для `new-window`.
`PREFIX` `n`        | Переход к следующему окну.
`PREFIX` `p`        | Переход к предудущему окну.
`PREFIX` `0`..`9`   | Выбор окна по номеру.
`PREFIX` `w`        | Вывод списка окон текущего сеанса с возможность выбора окна.
`PREFIX` `f`        | Поиск окна, содержащего указанный текст. Вывод списка окон текущего сеанса, содержащих этот текст.
`PREFIX` `,`        | Переименование окна.
`PREFIX` `&`        | Закрытие текущего окна после подтверждения. Если окно единственное в сеансе, закроется и сеанс.
`PREFIX` `%`        | Делит текущее окно пополам по вертикали.
`PREFIX` `"`        | Делит текущее окно пополам по горизонтали.
`PREFIX` `o`        | Циклическое перемещение по панелям окна.
`PREFIX` `q`        | Отображает номера на каждой панели.
`PREFIX` `x`        | Закрывает текущую панель после запроса подтверждения.
`PREFIX` `ПРОБЕЛ`   | Циклическое перемещение по макетам панелей.


#### Ссылки

2. http://brew.sh

3. https://tmux.github.io/
------------------


[0;36m  Cell [0;32mIn[2], line 18[0;36m[0m
[0;31m    Самый простой способ установить tmux на Mac — с помощью Homebrew.[2][0m
[0m                                                ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid character '—' (U+2014)


